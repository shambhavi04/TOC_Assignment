import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
public class State {
	private int ID;
	private Map<Character, ArrayList<State>> nextState; 	// Map of transition for each input

	private Set <State> states;
	private boolean acceptState;
	//used for NFA
	public State (int a) {
		this.setID(a);
		this.setNextState(new HashMap <Character, ArrayList<State>> ());
		this.setAcceptState(false);
	}
	// used for DFA
	public State(Set<State> states, int a) {
		this.setStates(states);
		this.setID(a);
		this.setNextState(new HashMap <Character, ArrayList<State>> ());
		// check if an accept state is present
		for (State h : states) {
			if (h.isAcceptState()) {
				this.setAcceptState(true);
				break;
			}
		}
	}
	// Add transition between states and then insert it into the arrayList
	public void addTransition (State next, char key) {
		ArrayList <State> l = this.nextState.get(key);
		if (l == null) {
			l = new ArrayList<State> ();
			this.nextState.put(key, l);
		}
		l.add(next);
	}
	// Get all transition states based on symbol
	public ArrayList<State> getAllTransitions(char c) {	
		if (this.nextState.get(c) == null){	
return new ArrayList<State> ();	
}
		else{
			return this.nextState.get(c);	
}
					}
	// Autogenerated
	public Map<Character, ArrayList<State>> getNextState() {
		return nextState;
	}
	public void setNextState(HashMap<Character, ArrayList<State>> hashMap) {
		this.nextState = hashMap;
	}
	public int getID() {
		return ID;
	}
	public void setID(int ID) {
		this.ID = ID;
	}
	public boolean isAcceptState() {
		return acceptState;
	}
	public void setAcceptState(boolean acceptState) {
		this.acceptState = acceptState;
	}
	public Set <State> getStates() {
		return states;
	}
	public void setStates(Set <State> states) {
		this.states = states;
	}
}
